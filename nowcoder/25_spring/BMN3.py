"""
    小红正在玩一个“炸砖块”游戏，游戏的规则如下：
    初始有一个 n * m 的砖块矩阵。小红会炸 k 次，每次会向一个位置投炸弹，
    如果这个位置有一个砖块，则砖块消失，上方的砖块向下落。
    小红希望你画出最终砖块的图案。

    输入：
        第一行输入三个正整数 n, m, k，代表矩阵的行数、列数和小红的炸砖块次数。
        接下来的 k 行，每行输入两个正整数 x, y，代表小红瞄准的是第 x 行第 y 列的坐标。
        1 ≤ n, m ≤ 1000
        1 ≤ k ≤ 10^5
        1 ≤ x ≤ n
        1 ≤ y ≤ m

    输出：
        输出 n 行，每行输出一个长度为 m 的、仅由 '.' 和 '*' 两种字符组成的字符串。
        '.' 代表空白，'*' 代表砖块。

    示例1
        输入：
        3 3 4
        3 1
        3 3
        2 3
        1 3

    输出：
        .*.
        **.
        ***
"""

def main():
    # 行数 n、列数 m、炸砖块次数 k
    n, m, k = map(int, input().split())

    # 初始化每一列的砖块数量，每列最开始都有 n 块砖
    cols = [n] * m

    for _ in range(k):
        # 读入炸砖块的目标位置 (x, y)
        # 注意：输入的坐标是 1-indexed（行和列的编号从1开始）
        x, y = map(int, input().split())
        y -= 1  # 将列号转换为 0-indexed，以便用于列表索引

        # 当前列有 cols[y] 块砖，则砖块占据的行范围为 (n - cols[y] + 1) 到 n（1-indexed）
        # 若炸弹投向的行 x 大于这个空白区域的高度（即 x > n - cols[y]），
        # 则说明炸弹击中了砖块，将该列砖块数减 1
        if x > n - cols[y]:
            cols[y] -= 1

    # 遍历每一行（0-indexed），输出对应的字符串
    for i in range(n):
        # 对于每一列 j，如果当前行 i (0-indexed) 大于等于砖块的起始行（n - cols[j]），
        # 则该位置有砖块，输出 '*'；否则输出 '.' 表示空白
        print("".join("*" if i >= n - cols[j] else "." for j in range(m)))



if __name__ == '__main__':
    main()